DTRlogitVar<-matrix(nrow=niter,ncol=4)
DTRlogitConf<-matrix(nrow=niter,ncol=8)
colnames(DTRcount)<-c("ACL","AWW","BCL","BWW")
colnames(DTRlogitProb)<-c("ACL","AWW","BCL","BWW")
colnames(DTRlogitVar)<-c("ACL","AWW","BCL","BWW")
colnames(DTRlogitConf)<-c("ACL Lower", "AWW Lower", "BCL Lower", "BWW Lower", "ACL Upper", "AWW Upper", "BCL Upper", "BWW Upper")
data<-bigdata[chooserows[i,],] #consider only n observations
lengthNR<-dim(data[data[,2]==0,])[1] #number of non-responders to first-stage treatment
dataNR<-cbind(data[data[,2]==0,], c(seq(1,lengthNR,by=1))) #create dataset of just nonresponders to stage1trt and assign an ID
dataresp1<-data[data[,2]==1,] #subsetset of patients who responded to first-stage treatment
dataresp1[,3]<-1 #assign responders to stage2trt=1
lengthR<-dim(dataresp1)[1] #number of responders
dataresp1<-cbind(dataresp1, c(seq(lengthNR+1,lengthNR+lengthR))) #assign ID to responders
dataresp2<-data[data[,2]==1,] #subset of patients who responded to first-stage treatment
dataresp2[,3]<--1 #assign responders to stage2trt=-1
dataresp2<-cbind(dataresp2, c(seq(lengthNR+1,lengthNR+lengthR))) #assign ID
#Count individuals consistent with each DTR
DTRcount[i,1]<- sum(data[,1]==1 & data[,2]==1) + sum(data[,1]==1 & data[,2]==0 & data[,3]==1) #ArAnrCL
DTRcount[i,2]<- sum(data[,1]==1 & data[,2]==1) + sum(data[,1]==1 & data[,2]==0 & data[,3]==-1) #ArAnrWW
DTRcount[i,3]<- sum(data[,1]==-1 & data[,2]==1) + sum(data[,1]==-1 & data[,2]==0 & data[,3]==1) #BrBnrCL
DTRcount[i,4]<- sum(data[,1]==-1 & data[,2]==1) + sum(data[,1]==-1 & data[,2]==0 & data[,3]==-1) #BrBnrWW
#Replicate data
repdata<-rbind(dataNR, dataresp1, dataresp2)
colnames(repdata)<-c("stage1trt","response","stage2trt","Y","weight", "id")
inter<-c(repdata[,1]*repdata[,3]) #"interaction" variable
repdata<-cbind(repdata,inter)
repdata<-as.data.frame(repdata)
r<-sum(repdata$response==1)/2/n
sortrepdata<-repdata[order(repdata$id) , ]
#Estmate full and null models
glmrepdata3<-geeglm(Y ~ stage1trt+stage2trt+inter, id=id, weights=weight,  family = binomial("logit"),corstr="independence",data=sortrepdata)
glmrepdata3RED<-geeglm(Y ~1, id=id, weights=weight,  family = binomial("logit"),corstr="independence",data=sortrepdata)
#summary(glmrepdata3)
#Omnibus test
omnibustest<-anova(glmrepdata3,glmrepdata3RED, test="Chisq")
#Estimate and store logit(DTRprob) and confidence interval for each DTR
# 1,1,1,1 <=> ArAnrCL
# 1,1,-1,-1 <=> ArAnrWW
# 1,-1,1,-1 <=> BrBnrCL
# 1,-1,-1,1 <=> BrBnrWW
est<-esticon(glmrepdata3,matrix(c(1,1,1,1,1,1,-1,-1,1,-1,1,-1,1,-1,-1,1),ncol=4))
DTRlogitProb[i,]<-est$Estimate
DTRlogitVar[i,]<-(est$Std.Error)^2
DTRlogitConf[i,]<-c(est$Lower,est$Upper)
#Reject omnibus test?
if (omnibustest$'P(>|Chi|)'<alpha)
omnibusCount = omnibusCount + 1
#crude iteration indicator (for progress purposes)
#if (i%%50 == 0){
#  percentDone = percentDone + 1
#  cat(percentDone,'% completed.','\n')
powerOmnibus<-omnibusCount/niter
#Compute log-scale variances for each estimation vector (columns of DTRlogitProb)
varArAnrCL<-var(DTRlogitProb[,1])
varArAnrWW<-var(DTRlogitProb[,2])
varBrBnrCL<-var(DTRlogitProb[,3])
varBrBnrWW<-var(DTRlogitProb[,4])
expitEmpVar<-exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW))/(1+exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW)))
#Compute expit probability and CI's
DTRprob<-exp(DTRlogitProb)/(1+exp(DTRlogitProb))
DTRconf<-exp(DTRlogitConf)/(1+exp(DTRlogitConf))
#compute empirical confidence interval - method 1, using CLT
empDTRconf1<-matrix(NA,nrow=4,ncol=2)
empDTRconf1[1,]<-c(mean(DTRprob[,1])-1.96*sqrt(varArAnrCL))
empDTRconf1[2,]<-c(mean(DTRprob[,2])-1.96*sqrt(varArAnrWW))
empDTRconf1[3,]<-c(mean(DTRprob[,3])-1.96*sqrt(varBrBnrCL))
empDTRconf1[4,]<-c(mean(DTRprob[,4])-1.96*sqrt(varBrBnrCL))
#compute empirical confidence interval - method 2, using percentiles
empDTRconf2<-matrix(NA,nrow=4,ncol=2)
empDTRconf2[1,]<-quantile(DTRprob[,1],c(.025,.975),na.rm=TRUE) #ArAnrCL
empDTRconf2[2,]<-quantile(DTRprob[,2],c(.025,.975),na.rm=TRUE) #ArAnrWW
empDTRconf2[3,]<-quantile(DTRprob[,3],c(.025,.975),na.rm=TRUE) #BrBnrCL
empDTRconf2[4,]<-quantile(DTRprob[,4],c(.025,.975),na.rm=TRUE) #BrBnrWW
#t = time()-t0
#print(t)
cat(' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n',
' POWER with ', n, 'subjects: ','\n',
'   of the Omnibus Test: ',round(powerOmnibus,4),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n' )
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n',
' ESTIMATED success probability per DTR:', '\n',
'   ArAnrCL: ',mean(DTRprob[,1]),'\n',
'   ArAnrWW: ',mean(DTRprob[,2]),'\n',
'   BrBnrCL: ',mean(DTRprob[,3]),'\n',
'   BrBnrWW: ',mean(DTRprob[,4]),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',
' ESTIMATED 95% confidence interval for P(Success)\n',
' ArAnrCL: (',mean(DTRconf[,1]),',',mean(DTRconf[,5]),') \n',
' ArAnrWW: (',mean(DTRconf[,2]),',',mean(DTRconf[,6]),') \n',
' BrBnrCL: (',mean(DTRconf[,3]),',',mean(DTRconf[,7]),') \n',
' BrBnrWW: (',mean(DTRconf[,4]),',',mean(DTRconf[,8]),') \n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',
' EMPIRICAL 95% confidence interval for P(Success) (via variance)\n',
' ArAnrCL: (',empDTRconf1[1,1],',',empDTRconf1[1,2],') \n',
' ArAnrWW: (',empDTRconf1[2,1],',',empDTRconf1[2,2],') \n',
' BrBnrCL: (',empDTRconf1[3,1],',',empDTRconf1[3,2],') \n',
' BrBnrWW: (',empDTRconf1[4,1],',',empDTRconf1[4,2],') \n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',
' EMPIRICAL 95% confidence interval for P(Success) (via percentile)\n',
' ArAnrCL: (',empDTRconf2[1,1],',',empDTRconf2[1,2],') \n',
' ArAnrWW: (',empDTRconf2[2,1],',',empDTRconf2[2,2],') \n',
' BrBnrCL: (',empDTRconf2[3,1],',',empDTRconf2[3,2],') \n',
' BrBnrWW: (',empDTRconf2[4,1],',',empDTRconf2[4,2],') \n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n',
' Mean number of individuals per DTR: \n',
'  ArAnrCL: ',mean(DTRcount[,1]),'\n',
'  ArAnrWW: ',mean(DTRcount[,2]),'\n',
'  BrBnrCL: ',mean(DTRcount[,3]),'\n',
'  BrBnrWW: ',mean(DTRcount[,4]),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n',
' TRUE success probability per DTR:', '\n',
'   ArAnrCL: ',mean(pArAnrCL),'\n',
'   ArAnrWW: ',mean(pArAnrWW),'\n',
'   BrBnrCL: ',mean(pBrBnrCL),'\n',
'   BrBnrWW: ',mean(pBrBnrWW),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n')
########################################
#####    STROKE SMART SIMULATION   #####
##### NICK SEEWALD, KELLEY KIDWELL #####
#####    UNIVERSITY OF MICHIGAN    #####
########################################
## DESCRIPTION OF VARIABLES:
##   n: Sample Size
##   qAr: Probability of Y=1 for those who are given first-stage treatment A and respond
##   qBr: Probability of Y=1 for those who are given first-stage treatment B and respond
##   qAnrWW: Probability of Y=1 for those who are given A, don't respond, and are assigned to WW
##   qAnrCL: Probability of Y=1 for those who are given A, don't respond, and are assigned to CL
##   qBnrWW: Probability of Y=1 for those who are given A, don't respond, and are assigned to WW
##   qBnrCL: Probability of Y=1 for those who are given A, don't respond, and are assigned to CL
##   AvsB: Percent difference in response between A and B, taken as a decimal (e.g., A has 5% more response than B)
##   alpha: Probability of Type-1 Error, defaults to 0.05
##   niter: Number of iterations to carry out, defaults to 5000.
#######################################################################################
library(aod)
library(geepack)
library(doBy)
#set seed
RNGkind("Mersenne-Twister")
set.seed(.Random.seed)
simulate.strokeSMART<-function(n,qAr,qBr,qAnrWW,qAnrCL,qBnrWW,qBnrCL,AvsB=0,alpha=0.05,niter=5000){
N = n*niter
# model baseline NIHSS based on NINDS data and truncate
# no ceiling function used because of dichotomization
nihss.baseline<-rnorm(N,14.7852564,7.1559972)
nihss.baseline[nihss.baseline<0]<-0
nihss.baseline[nihss.baseline>42]<-42
nihss.baseline.dichot<-rep(NA,N)
#create indicator for baseline: 1 if <= 8, 0 otherwise
nihss.baseline.dichot[nihss.baseline<=8]<-1
nihss.baseline.dichot[nihss.baseline>8]<-0
#create outcome probability vectors for each embedded DTR
pArAnrWW <-rep(NA,N)
pArAnrCL <-rep(NA,N)
pBrBnrWW <-rep(NA,N)
pBrBnrCL <-rep(NA,N)
pArAnrWW[nihss.baseline.dichot==1]<-(128/146)*qAr + (18/146)*qAnrWW
pArAnrCL[nihss.baseline.dichot==1]<-(128/146)*qAr + (18/146)*qAnrCL
pArAnrWW[nihss.baseline.dichot==0]<-(92/478)*qAr + (386/478)*qAnrWW
pArAnrCL[nihss.baseline.dichot==0]<-(92/478)*qAr + (386/478)*qAnrCL
pBrBnrWW[nihss.baseline.dichot==1]<-((128/146) - AvsB)*qBr + ((18/146) + AvsB)*qBnrWW
pBrBnrCL[nihss.baseline.dichot==1]<-((128/146) - AvsB)*qBr + ((18/146) + AvsB)*qBnrCL
pBrBnrWW[nihss.baseline.dichot==0]<-((92/478) - AvsB)*qBr + ((386/478) + AvsB)*qBnrWW
pBrBnrCL[nihss.baseline.dichot==0]<-((92/478) - AvsB)*qBr + ((386/478) + AvsB)*qBnrCL
#Miscellaneous initializations
omnibusCount=0
#percentDone = 0
#assign first-stage treatment
# 1 is A, -1 is B
stage1trt<-rbinom(N,1,.5)
stage1trt[stage1trt==0]<--1
#set response probability for A/B based on baseline NIHSS and simulate response
stage1resp<-rep(NA,N)
stage1resp[nihss.baseline.dichot==1 & stage1trt==1]<-rbinom(sum(nihss.baseline.dichot==1 & stage1trt==1),1,(128/146))
stage1resp[nihss.baseline.dichot==0 & stage1trt==1]<-rbinom(sum(nihss.baseline.dichot==0 & stage1trt==1),1,(92/478))
stage1resp[nihss.baseline.dichot==1 & stage1trt==-1]<-rbinom(sum(nihss.baseline.dichot==1 & stage1trt==-1),1,(128/146)-AvsB)
stage1resp[nihss.baseline.dichot==0 & stage1trt==-1]<-rbinom(sum(nihss.baseline.dichot==0 & stage1trt==-1),1,(92/478)-AvsB)
#assign second-stage treatment to non-responders
# 1 is CL, -1 is WW
num.resp<-sum(stage1resp==1)
stage2trt<-rep(NA,N)
stage2trt[stage1resp==0]<-rbinom(N-num.resp,1,.5)
stage2trt[stage2trt==0]<--1
#assign weights (2 per randomization)
weight<-rep(NA,N)
weight[stage1resp==1]<-2
weight[stage1resp==0]<-4
#simulate outcome Y
Y<-rep(NA,N)
Y[stage1trt==1 & stage1resp==1]<-rbinom(sum(stage1trt==1 & stage1resp==1),1,qAr)
Y[stage1trt==-1 & stage1resp==1]<-rbinom(sum(stage1trt==-1 & stage1resp==1),1,qBr)
Y[stage1trt==1 & stage1resp==0 & stage2trt==1]<-rbinom(sum(stage1trt==1 & stage1resp==0 & stage2trt==1),1,qAnrCL)
Y[stage1trt==1 & stage1resp==0 & stage2trt==-1]<-rbinom(sum(stage1trt==1 & stage1resp==0 & stage2trt==-1),1,qAnrWW)
Y[stage1trt==-1 & stage1resp==0 & stage2trt==1]<-rbinom(sum(stage1trt==-1 & stage1resp==0 & stage2trt==1),1,qBnrCL)
Y[stage1trt==-1 & stage1resp==0 & stage2trt==-1]<-rbinom(sum(stage1trt==-1 & stage1resp==0 & stage2trt==-1),1,qBnrWW)
#identify DTR (path-specific, e.g., Ar, AnrWW, and AnrCL are considered separately)
# 11 is Ar, 100 is AnrWW, 101 is AnrCL, -11 is Br, -100 is BnrWW, -101 is BnrCL
DTR<-rep(NA,N)
DTR[stage1trt==1 & stage1resp==1]<-11 #Ar
DTR[stage1trt==-1 & stage1resp==1]<--11 #Br
DTR[stage1trt==1 & stage1resp==0 & stage2trt==1]<-101 #AnrCL
DTR[stage1trt==1 & stage1resp==0 & stage2trt==-1]<-100 #AnrWW
DTR[stage1trt==-1 & stage1resp==0 & stage2trt==1]<--101 #BnrCL
DTR[stage1trt==-1 & stage1resp==0 & stage2trt==-1]<--100 #BnrWW
#compute mean success probabilities
#Note: 0.309 is overall response probability
#mspArAnrCL = (sum(Y[stage1trt==1 & stage1resp==1])/sum(DTR==11))*0.309 + (sum(Y[stage1trt==1 & stage1resp==0 & stage2trt==1])/sum(DTR==101))*(1-.309)
#mspArAnrWW = (sum(Y[stage1trt==1 & stage1resp==1])/sum(DTR==11))*0.309 + (sum(Y[stage1trt==1 & stage1resp==0 & stage2trt==-1])/sum(DTR==100))*(1-.309)
#mspBrBnrCL = (sum(Y[stage1trt==-1 & stage1resp==1])/sum(DTR==11))*0.309 + (sum(Y[stage1trt==-1 & stage1resp==0 & stage2trt==1])/sum(DTR==-101))*(1-.309)
#mspBrBnrWW = (sum(Y[stage1trt==-1 & stage1resp==1])/sum(DTR==11))*0.309 + (sum(Y[stage1trt==-1 & stage1resp==0 & stage2trt==-1])/sum(DTR==-100))*(1-.309)
#create bigdata matrix from which to sample.
bigdata<-matrix(c(stage1trt,stage1resp,stage2trt,Y, weight),ncol=5)
colnames(bigdata)<-c("stage1trt","stage1resp","stage2trt","Y","weight")
chooserows<-matrix(c(sample(1:N,N,replace=T)),nrow=niter,ncol=n) #get random sample of niter rows for each of the n subjects
data<-matrix(nrow=n,ncol=5)
#initialize probability and count matrices
DTRcount<-matrix(nrow=niter,ncol=4)
DTRlogitProb<-matrix(nrow=niter,ncol=4)
DTRlogitVar<-matrix(nrow=niter,ncol=4)
DTRlogitConf<-matrix(nrow=niter,ncol=8)
colnames(DTRcount)<-c("ACL","AWW","BCL","BWW")
colnames(DTRlogitProb)<-c("ACL","AWW","BCL","BWW")
colnames(DTRlogitVar)<-c("ACL","AWW","BCL","BWW")
colnames(DTRlogitConf)<-c("ACL Lower", "AWW Lower", "BCL Lower", "BWW Lower", "ACL Upper", "AWW Upper", "BCL Upper", "BWW Upper")
for (i in seq(from=1,to=niter,by=1)){
#create data matrix
data<-bigdata[chooserows[i,],] #consider only n observations
lengthNR<-dim(data[data[,2]==0,])[1] #number of non-responders to first-stage treatment
dataNR<-cbind(data[data[,2]==0,], c(seq(1,lengthNR,by=1))) #create dataset of just nonresponders to stage1trt and assign an ID
dataresp1<-data[data[,2]==1,] #subsetset of patients who responded to first-stage treatment
dataresp1[,3]<-1 #assign responders to stage2trt=1
lengthR<-dim(dataresp1)[1] #number of responders
dataresp1<-cbind(dataresp1, c(seq(lengthNR+1,lengthNR+lengthR))) #assign ID to responders
dataresp2<-data[data[,2]==1,] #subset of patients who responded to first-stage treatment
dataresp2[,3]<--1 #assign responders to stage2trt=-1
dataresp2<-cbind(dataresp2, c(seq(lengthNR+1,lengthNR+lengthR))) #assign ID
#Count individuals consistent with each DTR
DTRcount[i,1]<- sum(data[,1]==1 & data[,2]==1) + sum(data[,1]==1 & data[,2]==0 & data[,3]==1) #ArAnrCL
DTRcount[i,2]<- sum(data[,1]==1 & data[,2]==1) + sum(data[,1]==1 & data[,2]==0 & data[,3]==-1) #ArAnrWW
DTRcount[i,3]<- sum(data[,1]==-1 & data[,2]==1) + sum(data[,1]==-1 & data[,2]==0 & data[,3]==1) #BrBnrCL
DTRcount[i,4]<- sum(data[,1]==-1 & data[,2]==1) + sum(data[,1]==-1 & data[,2]==0 & data[,3]==-1) #BrBnrWW
#Replicate data
repdata<-rbind(dataNR, dataresp1, dataresp2)
colnames(repdata)<-c("stage1trt","response","stage2trt","Y","weight", "id")
inter<-c(repdata[,1]*repdata[,3]) #"interaction" variable
repdata<-cbind(repdata,inter)
repdata<-as.data.frame(repdata)
r<-sum(repdata$response==1)/2/n
sortrepdata<-repdata[order(repdata$id) , ]
#Estmate full and null models
glmrepdata3<-geeglm(Y ~ stage1trt+stage2trt+inter, id=id, weights=weight,  family = binomial("logit"),corstr="independence",data=sortrepdata)
glmrepdata3RED<-geeglm(Y ~1, id=id, weights=weight,  family = binomial("logit"),corstr="independence",data=sortrepdata)
#summary(glmrepdata3)
#Omnibus test
omnibustest<-anova(glmrepdata3,glmrepdata3RED, test="Chisq")
#Estimate and store logit(DTRprob) and confidence interval for each DTR
# 1,1,1,1 <=> ArAnrCL
# 1,1,-1,-1 <=> ArAnrWW
# 1,-1,1,-1 <=> BrBnrCL
# 1,-1,-1,1 <=> BrBnrWW
est<-esticon(glmrepdata3,matrix(c(1,1,1,1,1,1,-1,-1,1,-1,1,-1,1,-1,-1,1),ncol=4))
DTRlogitProb[i,]<-est$Estimate
DTRlogitVar[i,]<-(est$Std.Error)^2
DTRlogitConf[i,]<-c(est$Lower,est$Upper)
#Reject omnibus test?
if (omnibustest$'P(>|Chi|)'<alpha)
omnibusCount = omnibusCount + 1
#crude iteration indicator (for progress purposes)
#if (i%%50 == 0){
#  percentDone = percentDone + 1
#  cat(percentDone,'% completed.','\n')
}
powerOmnibus<-omnibusCount/niter
#Compute log-scale variances for each estimation vector (columns of DTRlogitProb)
varArAnrCL<-var(DTRlogitProb[,1])
varArAnrWW<-var(DTRlogitProb[,2])
varBrBnrCL<-var(DTRlogitProb[,3])
varBrBnrWW<-var(DTRlogitProb[,4])
expitEmpVar<-exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW))/(1+exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW)))
#Compute expit probability and CI's
DTRprob<-exp(DTRlogitProb)/(1+exp(DTRlogitProb))
DTRconf<-exp(DTRlogitConf)/(1+exp(DTRlogitConf))
#compute empirical confidence interval - method 1, using CLT
empDTRconf1<-matrix(NA,nrow=4,ncol=2)
empDTRconf1[1,]<-c(mean(DTRprob[,1])-1.96*sqrt(varArAnrCL))
empDTRconf1[2,]<-c(mean(DTRprob[,2])-1.96*sqrt(varArAnrWW))
empDTRconf1[3,]<-c(mean(DTRprob[,3])-1.96*sqrt(varBrBnrCL))
empDTRconf1[4,]<-c(mean(DTRprob[,4])-1.96*sqrt(varBrBnrCL))
#compute empirical confidence interval - method 2, using percentiles
empDTRconf2<-matrix(NA,nrow=4,ncol=2)
empDTRconf2[1,]<-quantile(DTRprob[,1],c(.025,.975),na.rm=TRUE) #ArAnrCL
empDTRconf2[2,]<-quantile(DTRprob[,2],c(.025,.975),na.rm=TRUE) #ArAnrWW
empDTRconf2[3,]<-quantile(DTRprob[,3],c(.025,.975),na.rm=TRUE) #BrBnrCL
empDTRconf2[4,]<-quantile(DTRprob[,4],c(.025,.975),na.rm=TRUE) #BrBnrWW
#t = time()-t0
#print(t)
cat(' ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n',
' POWER with ', n, 'subjects: ','\n',
'   of the Omnibus Test: ',round(powerOmnibus,4),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n' )
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n',
' ESTIMATED success probability per DTR:', '\n',
'   ArAnrCL: ',mean(DTRprob[,1]),'\n',
'   ArAnrWW: ',mean(DTRprob[,2]),'\n',
'   BrBnrCL: ',mean(DTRprob[,3]),'\n',
'   BrBnrWW: ',mean(DTRprob[,4]),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',
' ESTIMATED 95% confidence interval for P(Success)\n',
' ArAnrCL: (',mean(DTRconf[,1]),',',mean(DTRconf[,5]),') \n',
' ArAnrWW: (',mean(DTRconf[,2]),',',mean(DTRconf[,6]),') \n',
' BrBnrCL: (',mean(DTRconf[,3]),',',mean(DTRconf[,7]),') \n',
' BrBnrWW: (',mean(DTRconf[,4]),',',mean(DTRconf[,8]),') \n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',
' EMPIRICAL 95% confidence interval for P(Success) (via variance)\n',
' ArAnrCL: (',empDTRconf1[1,1],',',empDTRconf1[1,2],') \n',
' ArAnrWW: (',empDTRconf1[2,1],',',empDTRconf1[2,2],') \n',
' BrBnrCL: (',empDTRconf1[3,1],',',empDTRconf1[3,2],') \n',
' BrBnrWW: (',empDTRconf1[4,1],',',empDTRconf1[4,2],') \n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n',
' EMPIRICAL 95% confidence interval for P(Success) (via percentile)\n',
' ArAnrCL: (',empDTRconf2[1,1],',',empDTRconf2[1,2],') \n',
' ArAnrWW: (',empDTRconf2[2,1],',',empDTRconf2[2,2],') \n',
' BrBnrCL: (',empDTRconf2[3,1],',',empDTRconf2[3,2],') \n',
' BrBnrWW: (',empDTRconf2[4,1],',',empDTRconf2[4,2],') \n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n',
' Mean number of individuals per DTR: \n',
'  ArAnrCL: ',mean(DTRcount[,1]),'\n',
'  ArAnrWW: ',mean(DTRcount[,2]),'\n',
'  BrBnrCL: ',mean(DTRcount[,3]),'\n',
'  BrBnrWW: ',mean(DTRcount[,4]),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ \n')
cat('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n',
' TRUE success probability per DTR:', '\n',
'   ArAnrCL: ',mean(pArAnrCL),'\n',
'   ArAnrWW: ',mean(pArAnrWW),'\n',
'   BrBnrCL: ',mean(pBrBnrCL),'\n',
'   BrBnrWW: ',mean(pBrBnrWW),'\n',
'~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~','\n')
}
simulate.strokeSMART(2000,.4,.35,.3,.4,.3,.4)
dim(expitEmpVar)
expitEmpVar<-exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW))/(1+exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW)))
dim(expitEmpVar)
length(expitEmpVar)
head(DTRprob[,1])
i=2
data<-bigdata[chooserows[i,],] #consider only n observations
lengthNR<-dim(data[data[,2]==0,])[1] #number of non-responders to first-stage treatment
dataNR<-cbind(data[data[,2]==0,], c(seq(1,lengthNR,by=1))) #create dataset of just nonresponders to stage1trt and assign an ID
dataresp1<-data[data[,2]==1,] #subsetset of patients who responded to first-stage treatment
dataresp1[,3]<-1 #assign responders to stage2trt=1
lengthR<-dim(dataresp1)[1] #number of responders
dataresp1<-cbind(dataresp1, c(seq(lengthNR+1,lengthNR+lengthR))) #assign ID to responders
dataresp2<-data[data[,2]==1,] #subset of patients who responded to first-stage treatment
dataresp2[,3]<--1 #assign responders to stage2trt=-1
dataresp2<-cbind(dataresp2, c(seq(lengthNR+1,lengthNR+lengthR))) #assign ID
#Count individuals consistent with each DTR
DTRcount[i,1]<- sum(data[,1]==1 & data[,2]==1) + sum(data[,1]==1 & data[,2]==0 & data[,3]==1) #ArAnrCL
DTRcount[i,2]<- sum(data[,1]==1 & data[,2]==1) + sum(data[,1]==1 & data[,2]==0 & data[,3]==-1) #ArAnrWW
DTRcount[i,3]<- sum(data[,1]==-1 & data[,2]==1) + sum(data[,1]==-1 & data[,2]==0 & data[,3]==1) #BrBnrCL
DTRcount[i,4]<- sum(data[,1]==-1 & data[,2]==1) + sum(data[,1]==-1 & data[,2]==0 & data[,3]==-1) #BrBnrWW
#Replicate data
repdata<-rbind(dataNR, dataresp1, dataresp2)
colnames(repdata)<-c("stage1trt","response","stage2trt","Y","weight", "id")
inter<-c(repdata[,1]*repdata[,3]) #"interaction" variable
repdata<-cbind(repdata,inter)
repdata<-as.data.frame(repdata)
r<-sum(repdata$response==1)/2/n
sortrepdata<-repdata[order(repdata$id) , ]
#Estmate full and null models
glmrepdata3<-geeglm(Y ~ stage1trt+stage2trt+inter, id=id, weights=weight,  family = binomial("logit"),corstr="independence",data=sortrepdata)
glmrepdata3RED<-geeglm(Y ~1, id=id, weights=weight,  family = binomial("logit"),corstr="independence",data=sortrepdata)
#summary(glmrepdata3)
#Omnibus test
omnibustest<-anova(glmrepdata3,glmrepdata3RED, test="Chisq")
#Estimate and store logit(DTRprob) and confidence interval for each DTR
# 1,1,1,1 <=> ArAnrCL
# 1,1,-1,-1 <=> ArAnrWW
# 1,-1,1,-1 <=> BrBnrCL
# 1,-1,-1,1 <=> BrBnrWW
est<-esticon(glmrepdata3,matrix(c(1,1,1,1,1,1,-1,-1,1,-1,1,-1,1,-1,-1,1),ncol=4))
DTRlogitProb[i,]<-est$Estimate
DTRlogitVar[i,]<-(est$Std.Error)^2
DTRlogitConf[i,]<-c(est$Lower,est$Upper)
#Reject omnibus test?
if (omnibustest$'P(>|Chi|)'<alpha)
omnibusCount = omnibusCount + 1
#crude iteration indicator (for progress purposes)
#if (i%%50 == 0){
#  percentDone = percentDone + 1
#  cat(percentDone,'% completed.','\n')
varArAnrCL<-var(DTRlogitProb[,1])
varArAnrWW<-var(DTRlogitProb[,2])
varBrBnrCL<-var(DTRlogitProb[,3])
varBrBnrWW<-var(DTRlogitProb[,4])
expitEmpVar<-exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW))/(1+exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW)))
varArAnrCL<-var(DTRlogitProb[,1])
varArAnrWW<-var(DTRlogitProb[,2])
varBrBnrCL<-var(DTRlogitProb[,3])
varBrBnrWW<-var(DTRlogitProb[,4])
expitEmpVar<-exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW))/(1+exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW)),na.rm=TRUE)
expitEmpVar
?var
varArAnrCL<-var(DTRlogitProb[,1],na.rm=TRUE)
varArAnrCL
varArAnrCL<-var(DTRlogitProb[,1],na.rm=TRUE)
varArAnrWW<-var(DTRlogitProb[,2],na.rm=TRUE)
varBrBnrCL<-var(DTRlogitProb[,3],na.rm=TRUE)
varBrBnrWW<-var(DTRlogitProb[,4],na.rm=TRUE)
expitEmpVar<-exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW))/(1+exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW)))
expitEmpVar
head(DTRconf)
mean(DTRprob[,1],na.rm=TRUE)
mean(DTRprob[,1],na.rm=TRUE)-1.96*sqrt(expitEmpVar[1])
varArAnrCL<-var(DTRprob[,1],na.rm=TRUE)
varArAnrWW<-var(DTRprob[,2],na.rm=TRUE)
varBrBnrCL<-var(DTRprob[,3],na.rm=TRUE)
varBrBnrWW<-var(DTRprob[,4],na.rm=TRUE)
expitEmpVar<-exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW))/(1+exp(c(varArAnrCL,varArAnrWW,varBrBnrCL,varBrBnrWW)))
mean(DTRprob[,1],na.rm=TRUE)-1.96*sqrt(varArAnrCL)
mean(DTRprob[,1],na.rm=TRUE)
varArAnrCL
varArAnrCL<-var(DTRprob[,1],na.rm=TRUE)
varArAnrCL
DTRprob<-exp(DTRlogitProb)/(1+exp(DTRlogitProb))
varArAnrCL<-var(DTRprob[,1],na.rm=TRUE)
varArAnrCL
mean(DTRprob[,1],na.rm=TRUE)-1.96*sqrt(varArAnrCL)
empDTRconf1<-matrix(NA,nrow=4,ncol=2)
empDTRconf1[1,]<-c(mean(DTRprob[,1])-1.96*sqrt(varArAnrCL),mean(DTRprob[,1])+1.96*sqrt(varArAnrCL)
empDTRconf1[2,]<-c(mean(DTRprob[,2])-1.96*sqrt(varArAnrWW),mean(DTRprob[,2])+1.96*sqrt(varArAnrWW)
empDTRconf1[3,]<-c(mean(DTRprob[,3])-1.96*sqrt(varBrBnrCL),mean(DTRprob[,3])+1.96*sqrt(varBrBnrCL)
empDTRconf1[4,]<-c(mean(DTRprob[,4])-1.96*sqrt(varBrBnrWW),mean(DTRprob[,4])+1.96*sqrt(varBrBnrWW)
time=c(0,3,6,9,12,15,18)
for (t in time){}
for (t in time){}
for (t in time){  }
sid1 = 179.13 - 4.1756 - 37.3191 - (5.507-1.9571 - .8743)*time
sid1
sid80 - 179.13 + 54.6824 - (5.5070+1.0344)time
sid80 - 179.13 + 54.6824 - (5.5070+1.0344)*time
sid80 = 179.13 + 54.6824 - (5.5070+1.0344)*time
sid80
cat('NULL SCENARIO: \n')
cat('NULL SCENARIO: \n') kasjdlfkjs
cat('NULL SCENARIO: \n') 20+3
cat('NULL SCENARIO: \n') 20+3
cat('NULL SCENARIO: \n')
cat('NULL SCENARIO:')
force.package(png)
force.package<-function(package){
#adapted from
#http://r.789695.n4.nabble.com/Install-package-automatically-if-not-there-tp2267532p2267659.html
package<-as.character(substitute(package))
if (package %in% .packages(all.available=TRUE)){
eval(parse(text=paste("require(",package,")", sep="")))
}
else {
eval(parse(text=paste("install.packages('",package,"')",sep="")))
eval(parse(text=paste("require(",package,")", sep="")))
}
}
force.package(png)
test<-readPNG("C:/Users/Nick/Pictures/smartdesignsab.png")
grid::grid.raster(test)
install.packages("shiny")
library(shiny)
library(shiny)
?column
shiny::runApp('Dropbox/Shiny/App-1')
numericInput
?numericInput
shiny::runApp('Dropbox/Shiny/App-1')
shiny::runApp('Dropbox/Shiny/App-1')
shiny::runApp('Dropbox/Shiny/App-1')
shiny::runApp('Dropbox/Shiny/App-1')
shiny::runApp('Dropbox/Shiny/App-1')
shiny::runApp('Dropbox/Shiny/App-1')
wd
?wd
shiny::runApp('Dropbox/Kidwell Project/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/binarySMART')
?pwr.norm.test
?power.norm.test
?power
??power
install.packages("devtools")
devtools::install_github("shiny","rstudio")
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
install.packages("pwr")
library("pwr")
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
?is.NA
??NA
?is.na
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
shiny::runApp('Dropbox/Kidwell Project/Binary Outcome SMART/binarySMART')
